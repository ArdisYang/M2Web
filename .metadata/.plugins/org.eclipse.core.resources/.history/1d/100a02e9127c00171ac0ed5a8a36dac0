package com.table.Account;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Restrictions;

import com.Hibernate.HibernateUtil;

public class AccountDAO extends HibernateUtil<Account> {

	public String login(Account loginAccount) {
		Session sess = null;
		String account = "";
		try {
			sess = HibernateUtil.getSessionFactory().openSession();
			Criteria criteria = sess.createCriteria(loginAccount.getClass());
			Iterator iterator = criteria.list().iterator();
			while (iterator.hasNext()) {
				// arraylist.add((T) iterator.next());
			}
		} catch (HibernateException e) {
			throw new RuntimeException(e);
		} finally {
			sess.close();
		}
		return account;
	}

	public String find(Account loginAccount) {
		Session session = null;
		String msg="";
		try {
			session = HibernateUtil.getSessionFactory().openSession();
			StringBuffer sb = new StringBuffer();
			sb.append("select *  from "+Account.class.getName());
			sb.append(" user where user.name in (:accounts)");
			Query query = session.createQuery(sb.toString());
			query.setParameter("accounts", loginAccount.getName());
			Account checkAccount=(Account) query.list().get(0);
			System.out.println("checkAccount : "+checkAccount.getId());
			System.out.println("checkAccount : "+checkAccount.getName());
			System.out.println("checkAccount : "+checkAccount.getPassword());
//			if(checkAccount){
//				
//			}
		} catch (HibernateException e) {
			throw new RuntimeException(e);
		} finally {
			session.close();
		}
		return msg;
	}
	/*
	 * 1. DetachedCriteria
	 * criteria=DetachedCriteria.forClass(ObjectEntity.class);
	 * 
	 * criteria.add(Restrictions.eq("propertyName", propertyValue));
	 * 
	 * List result=getHibernateTemplate().findByCriteria(criteria);
	 * 
	 * 
	 * 2. String hql = “from Street”;
	 * 
	 * Query query = session.createQuery(hql);
	 * 
	 * List<Street> list = query.list(); *
	 */

}
